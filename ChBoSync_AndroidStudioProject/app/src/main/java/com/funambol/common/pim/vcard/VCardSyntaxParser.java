/* Generated By:JavaCC: Do not edit this line. VCardSyntaxParser.java */
package com.funambol.common.pim.vcard;

import java.io.InputStream;

import com.funambol.common.pim.*;

/**
 * This class parses an input file formatted according to
 * versit vCard 2.1 specification and generates an object model of the contact
 * using the package com.funambol.pdi.contact
 *
 * @see Contact
 * @version $Id: VCardParser.jj,v 1.7 2008-08-26 15:51:24 luigiafassina Exp $
 */
public class VCardSyntaxParser implements VCardSyntaxParserConstants {

    private VCardSyntaxParserListener listener;

    public void parse() throws ParseException {
        vCard();
    }

    public void setListener(VCardSyntaxParserListener listener) {
        this.listener = listener;
    }

  final public void vCard() throws ParseException {
        listener.start();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case WS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(VCBEGIN);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case WS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_3:
    while (true) {
      content();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATEGORIES:
      case VERSION:
      case TITLE:
      case NICKNAME:
      case EMAIL:
      case FN:
      case ORG:
      case BDAY:
      case PHOTO:
      case ADR:
      case UID:
      case LABEL:
      case ROLE:
      case TZ:
      case LOGO:
      case NOTE:
      case URL:
      case N:
      case REV:
      case TEL:
      case FBURL:
      case CLASS:
      case GEO:
      case MAILER:
      case IMPP:
      case AGENT:
      case PRODID:
      case KEY:
      case FOLDER:
      case ANNIVERSARY:
      case CHILDREN:
      case COMPANIES:
      case LANGUAGES:
      case MANAGER:
      case MILEAGE:
      case SPOUSE:
      case SUBJECT:
      case EXTENSION:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(VCEND);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case WS:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
        listener.end();
  }

  final public void content() throws ParseException {
 Token group=null;
    if (jj_2_1(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        group = jj_consume_token(IDENTIFIER);
        jj_consume_token(1);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      property(group);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        notImplemented();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// All properties we do not implement, but are willing to parse.
// We simply ignore them as allowed by the standard.
  final public void notImplemented() throws ParseException {
    Token identifier;
    identifier = jj_consume_token(IDENTIFIER);
    params();
    colon();
    text();
    jj_consume_token(EOL);

  }

  final public void property(Token group) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
      version(group);
      break;
    case TITLE:
      title(group);
      break;
    case N:
      name(group);
      break;
    case EMAIL:
      mail(group);
      break;
    case TEL:
      tel(group);
      break;
    case FN:
      fname(group);
      break;
    case ORG:
      organization(group);
      break;
    case ADR:
      address(group);
      break;
    case ROLE:
      role(group);
      break;
    case URL:
      url(group);
      break;
    case REV:
      rev(group);
      break;
    case NICKNAME:
      nickname(group);
      break;
    case BDAY:
      birthday(group);
      break;
    case LABEL:
      label(group);
      break;
    case TZ:
      timezone(group);
      break;
    case LOGO:
      logo(group);
      break;
    case NOTE:
      note(group);
      break;
    case UID:
      uid(group);
      break;
    case PHOTO:
      photo(group);
      break;
    case FOLDER:
      folder(group);
      break;
    case ANNIVERSARY:
      anniversary(group);
      break;
    case CHILDREN:
      children(group);
      break;
    case COMPANIES:
      companies(group);
      break;
    case LANGUAGES:
      languages(group);
      break;
    case MANAGER:
      manager(group);
      break;
    case MILEAGE:
      mileage(group);
      break;
    case SPOUSE:
      spouse(group);
      break;
    case SUBJECT:
      subject(group);
      break;
    case CATEGORIES:
      categories(group);
      break;
    case FBURL:
      freebusy(group);
      break;
    case CLASS:
      accessClass(group);
      break;
    case GEO:
      geo(group);
      break;
    case MAILER:
      mailer(group);
      break;
    case IMPP:
      impp(group);
      break;
    case AGENT:
      agent(group);
      break;
    case PRODID:
      prodid(group);
      break;
    case KEY:
      key(group);
      break;
    case EXTENSION:
      extension(group);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void categories(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(CATEGORIES);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setCategories(content, plist, group);
  }

  final public void extension(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    Token xtagName  = null;
    xtagName = jj_consume_token(EXTENSION);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.addExtension(xtagName.image, content, plist, group);
  }

  final public void version(Token group) throws ParseException {
    Token ver;
    ParamList plist = null;
    jj_consume_token(VERSION);
    plist = params();
    colon();
    ver = jj_consume_token(CONTENTSTRING);
    jj_consume_token(EOL);
        listener.setVersion(ver.image, plist, group);
  }

  final public void title(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(TITLE);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setTitle(content, plist, group);
  }

  final public void mail(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(EMAIL);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setMail(content, plist, group);
  }

  final public void url(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(URL);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setUrl(content, plist, group);
  }

  final public void tel(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(TEL);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setTelephone(content, plist, group);
  }

  final public void fname(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(FN);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setFName(content, plist, group);
  }

  final public void role(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(ROLE);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setRole(content, plist, group);
  }

  final public void rev(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(REV);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setRevision(content, plist, group);
  }

  final public void nickname(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(NICKNAME);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setNickname(content, plist, group);
  }

  final public void organization(Token group) throws ParseException {
    ParamList plist  = null            ;
    String content   = null            ;
    jj_consume_token(ORG);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setOrganization(content, plist, group);
  }

  final public void address(Token group) throws ParseException {
    ParamList plist  = null            ;
    String content   = null            ;
    jj_consume_token(ADR);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setAddress(content, plist, group);
  }

  final public void birthday(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(BDAY);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setBirthday(content, plist, group);
  }

  final public void label(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(LABEL);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setLabel(content, plist, group);
  }

  final public void timezone(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(TZ);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setTimezone(content, plist, group);
  }

  final public void logo(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(LOGO);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setLogo(content, plist, group);
  }

  final public void note(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(NOTE);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setNote(content, plist, group);
  }

  final public void uid(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(UID);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setUid(content, plist, group);
  }

  final public void photo(Token group) throws ParseException {
    ParamList plist  = null            ;
    String content   = null            ;
    FieldsList flist = new FieldsList();
    jj_consume_token(PHOTO);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setPhoto(content, plist, group);
  }

  final public void name(Token group) throws ParseException {
    ParamList plist  = null            ;
    String content   = null            ;
    jj_consume_token(N);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setName(content, plist, group);
  }

  final public void folder(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(FOLDER);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setFolder(content, plist, group);
  }

  final public void freebusy(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(FBURL);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setFreebusy(content, plist, group);
  }

  final public void anniversary(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(ANNIVERSARY);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setAnniversary(content, plist, group);
  }

  final public void children(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(CHILDREN);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setChildren(content, plist, group);
  }

  final public void companies(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(COMPANIES);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setCompanies(content, plist, group);
  }

  final public void languages(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(LANGUAGES);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setLanguages(content, plist, group);
  }

  final public void manager(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(MANAGER);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setManager(content, plist, group);
  }

  final public void mileage(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(MILEAGE);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setMileage(content, plist, group);
  }

  final public void spouse(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(SPOUSE);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setSpouse(content, plist, group);
  }

  final public void subject(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(SUBJECT);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setSubject(content, plist, group);
  }

  final public void accessClass(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(CLASS);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setAccessClass(content, plist, group);
  }

  final public void geo(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(GEO);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setGeo(content, plist, group);
  }

  final public void mailer(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(MAILER);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setMailer(content, plist, group);
  }

  final public void impp(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(IMPP);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setIMPP(content, plist, group);
  }

  final public void agent(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(AGENT);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setAgent(content, plist, group);
  }

  final public void prodid(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(PRODID);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setProductID(content, plist, group);
  }

  final public void key(Token group) throws ParseException {
    ParamList plist = null;
    String content  = null;
    jj_consume_token(KEY);
    plist = params();
    colon();
    content = text();
    jj_consume_token(EOL);
        listener.setKey(content, plist, group);
  }

// --------------------------- SERVICE BNF EXPANSIONS --------------------------

/**
 * Parses property parameters and returns a ParamList with the generated Tokens.
 * Example: in TEL;WORK;VOICE;CHARSET=ISO-8859-8:+1-800-555-1234 will parse the
 * ";WORK;VOICE;CHARSET=ISO-8859-8:" part and return a list containing "WORK"
 * and "VOICE" as types, and "ISO-8859-8" as charset.
 *
 * @return the list of parameters
 */
  final public ParamList params() throws ParseException {
    ParamList paramList = new ParamList();
    Token paramName = null, paramValue = null;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
      case SEMICOLON_QP:
      case QUOTED_PRINTABLE:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
      case SEMICOLON_QP:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        case SEMICOLON_QP:
          jj_consume_token(SEMICOLON_QP);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        paramName = jj_consume_token(PARAMSTRING);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          jj_consume_token(EQUAL);
          paramValue = jj_consume_token(PARAMSTRING);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
            paramList.add(paramName.image, (paramValue == null) ? null : paramValue.image);
        break;
      case QUOTED_PRINTABLE:
        jj_consume_token(QUOTED_PRINTABLE);
            paramList.add("ENCODING", "QUOTED-PRINTABLE");
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return paramList;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses the fields of a property value and returns a StringBuffer with text after ":".
 * The single element comma separated are retrieved by function in FieldsList class
 *
 * @return the list of fields
 */
  final public String text() throws ParseException {
    Token t = null;
    StringBuffer sb = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEOL:
    case SEOL_QP:
    case CONTENTSTRING:
    case CONTENTSTRING_QP:
    case NONBREAKINGEQUALS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEOL:
      case CONTENTSTRING:
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEOL:
            jj_consume_token(SEOL);
            break;
          case CONTENTSTRING:
            t = jj_consume_token(CONTENTSTRING);
                            sb.append(t.image);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEOL:
          case CONTENTSTRING:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_6;
          }
        }
        break;
      case SEOL_QP:
      case CONTENTSTRING_QP:
      case NONBREAKINGEQUALS:
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEOL_QP:
            jj_consume_token(SEOL_QP);
            break;
          case CONTENTSTRING_QP:
            t = jj_consume_token(CONTENTSTRING_QP);
                                sb.append(t.image);
            break;
          case NONBREAKINGEQUALS:
            t = jj_consume_token(NONBREAKINGEQUALS);
                                 sb.append(t.image);
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEOL_QP:
          case CONTENTSTRING_QP:
          case NONBREAKINGEQUALS:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_7;
          }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
         {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void colon() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      break;
    case COLON_QP:
      jj_consume_token(COLON_QP);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(PRODID)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(CHILDREN)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(ADR)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(CATEGORIES)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(AGENT)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(ANNIVERSARY)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(ORG)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(IMPP)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(FBURL)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(NICKNAME)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(MAILER)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(FOLDER)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(REV)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(GEO)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(N)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(ROLE)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(1)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(PHOTO)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(FN)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(SUBJECT)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(UID)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(TEL)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(SPOUSE)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(NOTE)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(URL)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(MILEAGE)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(LOGO)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(EMAIL)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(QUOTED_PRINTABLE)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(MANAGER)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(TZ)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(TITLE)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(LANGUAGES)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(VERSION)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(KEY)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(COMPANIES)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(BDAY)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(EXTENSION)) return true;
    if (jj_3R_86()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  public VCardSyntaxParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x4,0x4,0x4,0x4,0xfffffc00,0x4,0x4,0x0,0x0,0xfffffc00,0x180,0x180,0x200,0x180,0x8,0x8,0x10,0x10,0x18,0x18,0x60,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x200000,0x200000,0x200000,0x200000,0x1027fff,0x200000,0x200000,0x1000000,0x1000000,0x27fff,0x400000,0x0,0x0,0x400000,0x40000,0x40000,0x180000,0x180000,0x1c0000,0x1c0000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public VCardSyntaxParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public VCardSyntaxParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.toString()); }
    token_source = new VCardSyntaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.toString()); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public VCardSyntaxParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VCardSyntaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public VCardSyntaxParser(VCardSyntaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(VCardSyntaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[57];
    for (int i = 0; i < 57; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
