/* Generated By:JavaCC: Do not edit this line. ICalendarSyntaxParserTokenManager.java */
package com.funambol.common.pim.icalendar;
import java.io.InputStreamReader;
import java.util.*;
import com.funambol.common.pim.*;

public class ICalendarSyntaxParserTokenManager implements ICalendarSyntaxParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1e7ffeL) != 0L)
         {
            jjmatchedKind = 32;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x1e7ffeL) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 7;
         }
         return -1;
      case 2:
         if ((active0 & 0x1e7ffeL) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
            return 7;
         }
         return -1;
      case 3:
         if ((active0 & 0x5c70L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1e238eL) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
            return 7;
         }
         return -1;
      case 4:
         if ((active0 & 0x5c70L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1e238eL) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
            return 7;
         }
         return -1;
      case 5:
         if ((active0 & 0x1e0000L) != 0L)
            return 7;
         if ((active0 & 0x5c70L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x238eL) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x5c70L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x238eL) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x5c70L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x238eL) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x5c70L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x238eL) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x5c30L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x238eL) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x1c10L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x238eL) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x1c10L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x2386L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x410L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x382L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x382L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x238eL);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x5c70L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e0000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x238eL);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x5c70L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x5c70L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x238eL);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1e0000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa4_0(active0, 0x5c70L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1e0000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x238eL);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x238eL);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x1e0000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x4470L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa6_0(active0, 0x238eL);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x5000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 77:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 7);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 7);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 7);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 7);
         break;
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0xc40L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x810L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0x20aeL);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x6200L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x24L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x1010L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x188L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x102L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x410L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x1080L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L);
      case 79:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(8, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x4L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x2800L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x8L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x4L);
      case 71:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x202L);
      case 77:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         return jjMoveStringLiteralDfa10_0(active0, 0x80L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x110L);
      case 84:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(9, 5);
         break;
      case 90:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x110L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x82L);
      case 72:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x4L);
      case 79:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(10, 3);
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x2800L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x110L);
      case 68:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(11, 11);
         break;
      case 71:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      case 77:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(11, 13);
         break;
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x402L);
      case 84:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(11, 2);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(11, 12);
         break;
      case 90:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa13_0(active0, 0x2L);
      case 69:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         break;
      case 72:
         return jjMoveStringLiteralDfa13_0(active0, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x80L);
      case 82:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(12, 4);
         return jjMoveStringLiteralDfa13_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x2L);
      case 68:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(13, 8);
         break;
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x80L);
      case 84:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(13, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(14, 7);
         break;
      case 82:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(14, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(6);
                  break;
               case 1:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 32;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 95)
                     jjCheckNAdd(6);
                  break;
               case 5:
                  if (curChar == 95)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(4, 0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xdfffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 61)
                     jjAddStates(0, 2);
                  else if (curChar == 10)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 61)
                     jjCheckNAddTwoStates(6, 5);
                  break;
               case 0:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0xdfffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if (curChar == 10 && kind > 39)
                     kind = 39;
                  break;
               case 6:
                  if (curChar == 13)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 61)
                     jjAddStates(0, 2);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(14, 12);
                  break;
               case 12:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 14:
                  if (curChar == 13)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(19, 16);
                  break;
               case 16:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 19:
                  if (curChar == 13)
                     jjCheckNAdd(16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 3:
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(3);
                  break;
               case 8:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x7e0000007eL & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7e0000007eL & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 58:
         return jjStopAtPos(0, 34);
      case 59:
         return jjStartNfaWithStates_3(0, 27, 26);
      case 61:
         return jjStopAtPos(0, 28);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xd3ffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddStates(3, 7);
                  }
                  else if (curChar == 13)
                     jjCheckNAddTwoStates(43, 46);
                  else if (curChar == 59)
                     jjAddStates(8, 9);
                  break;
               case 0:
                  if ((0xd3ffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(0);
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 18:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 35:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 42:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(43, 46);
                  break;
               case 43:
               case 45:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 44:
                  if (curChar == 13)
                     jjCheckNAdd(43);
                  break;
               case 46:
               case 48:
                  if (curChar == 10)
                     jjCheckNAddStates(10, 12);
                  break;
               case 47:
                  if (curChar == 13)
                     jjCheckNAdd(46);
                  break;
               case 49:
                  if ((0x100000200L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 50:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(3, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(0);
                  break;
               case 26:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 2:
                  if (curChar == 69 && kind > 30)
                     kind = 30;
                  break;
               case 3:
               case 27:
                  if (curChar == 76)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 59:
         return jjStopAtPos(0, 24);
      default :
         return jjMoveNfa_5(4, 0);
   }
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xf7ffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0xf7ffffffffffdbffL & l) == 0L)
                     break;
                  kind = 25;
                  jjCheckNAdd(3);
                  break;
               case 5:
               case 7:
                  if (curChar != 10)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 92)
                     jjAddStates(13, 14);
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  kind = 25;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(4, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddStates(15, 17);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if (curChar == 10)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x100000200L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 7:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(15, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 3:
                  kind = 35;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 58:
         return jjStopAtPos(0, 23);
      default :
         return jjMoveNfa_6(3, 0);
   }
}
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 61)
                     jjCheckNAdd(6);
                  else if (curChar == 59)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 4:
                  if ((0xd3ffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 61)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0xd3ffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 58:
         return jjStopAtPos(0, 33);
      case 59:
         return jjStartNfaWithStates_4(0, 27, 26);
      case 61:
         return jjStopAtPos(0, 28);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xd3ffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddStates(3, 7);
                  }
                  else if (curChar == 13)
                     jjCheckNAddTwoStates(43, 46);
                  else if (curChar == 59)
                     jjAddStates(8, 9);
                  break;
               case 0:
                  if ((0xd3ffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(0);
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 18:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 35:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 42:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(43, 46);
                  break;
               case 43:
               case 45:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 44:
                  if (curChar == 13)
                     jjCheckNAdd(43);
                  break;
               case 46:
               case 48:
                  if (curChar == 10)
                     jjCheckNAddStates(10, 12);
                  break;
               case 47:
                  if (curChar == 13)
                     jjCheckNAdd(46);
                  break;
               case 49:
                  if ((0x100000200L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 50:
                  if (curChar != 10)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(3, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(0);
                  break;
               case 26:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 2:
                  if (curChar == 69 && kind > 30)
                     kind = 30;
                  break;
               case 3:
               case 27:
                  if (curChar == 76)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   8, 10, 15, 44, 45, 47, 48, 49, 26, 41, 47, 48, 49, 6, 7, 1, 
   2, 6, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\102\105\107\111\116\72\126\103\101\114\105\116\104\101\122", 
"\102\105\107\111\116\72\126\105\126\105\116\124", "\102\105\107\111\116\72\126\124\117\104\117", 
"\105\116\104\72\126\103\101\114\105\116\104\101\122", "\105\116\104\72\126\105\126\105\116\124", 
"\105\116\104\72\126\124\117\104\117", "\102\105\107\111\116\72\126\124\111\115\105\132\117\116\105", 
"\102\105\107\111\116\72\123\124\101\116\104\101\122\104", "\102\105\107\111\116\72\104\101\131\114\111\107\110\124", 
"\105\116\104\72\126\124\111\115\105\132\117\116\105", "\105\116\104\72\123\124\101\116\104\101\122\104", 
"\105\116\104\72\104\101\131\114\111\107\110\124", "\102\105\107\111\116\72\126\101\114\101\122\115", 
"\105\116\104\72\126\101\114\101\122\115", null, null, "\101\101\114\101\122\115", "\104\101\114\101\122\115", 
"\115\101\114\101\122\115", "\120\101\114\101\122\115", null, null, "\72", "\73", null, null, "\73", 
"\75", null, null, null, null, "\72", "\72", null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PROP_VALUE_STATE_QP", 
   "PROP_VALUE_STATE", 
   "PARAMLIST_WITH_QP_STATE", 
   "PARAMLIST_STATE", 
   "EXCEPTION_PROP_STATE", 
   "EXCEPTION_PARAM_STATE", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 6, 6, 6, 6, -1, -1, 5, -1, 
   -1, -1, -1, -1, -1, 3, -1, 4, 2, 1, -1, -1, -1, -1, -1, -1, -1, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[51];
private final int[] jjstateSet = new int[102];
protected char curChar;
public ICalendarSyntaxParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ICalendarSyntaxParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 51; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
