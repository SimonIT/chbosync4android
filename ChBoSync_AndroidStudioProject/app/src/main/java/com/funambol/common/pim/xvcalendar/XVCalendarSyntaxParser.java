/* Generated By:JavaCC: Do not edit this line. XVCalendarSyntaxParser.java */
package com.funambol.common.pim.xvcalendar;

import java.io.InputStreamReader;
import java.util.*;

import com.funambol.common.pim.*;

public class XVCalendarSyntaxParser implements XVCalendarSyntaxParserConstants {

    private XVCalendarSyntaxParserListener listener;

    public void parse() throws ParseException {
        listener.start();
        try {
            XVCalendar();
        } finally {
            listener.end();
        }
    }

    public void setListener(XVCalendarSyntaxParserListener listener) {
        this.listener = listener;
    }

  final public void XVCalendar() throws ParseException {
    jj_consume_token(BEGIN_VCAL_T);
    jj_consume_token(CRLF_T);
    CalItems();
    jj_consume_token(END_VCAL_T);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CRLF_T:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(CRLF_T);
    }
    jj_consume_token(0);
  }

  final public void CalItems() throws ParseException {
    ParserProperty property;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN_VEVENT_T:
      case BEGIN_VTODO_T:
      case IDENTIFIER_T:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN_VEVENT_T:
        VEventItem();
        break;
      case BEGIN_VTODO_T:
        VToDoItem();
        break;
      case IDENTIFIER_T:
        property = Property();
          listener.addProperty(property);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void VEventItem() throws ParseException {
    ParserProperty property;
    jj_consume_token(BEGIN_VEVENT_T);
      listener.startEvent();
    jj_consume_token(CRLF_T);
    label_3:
    while (true) {
      property = Property();
          listener.addEventProperty(property);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER_T:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(END_VEVENT_T);
      listener.endEvent();
    jj_consume_token(CRLF_T);
  }

  final public void VToDoItem() throws ParseException {
    ParserProperty property;
    jj_consume_token(BEGIN_VTODO_T);
      listener.startToDo();
    jj_consume_token(CRLF_T);
    label_4:
    while (true) {
      property = Property();
          listener.addToDoProperty(property);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER_T:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(END_VTODO_T);
      listener.endToDo();
    jj_consume_token(CRLF_T);
  }

  final public ParserProperty Property() throws ParseException {
    Token name;
    ArrayList parameters = new ArrayList();
    StringBuffer value = new StringBuffer();
    name = jj_consume_token(IDENTIFIER_T);
    Parameters(parameters);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON_T:
      jj_consume_token(COLON_T);
      break;
    case COLON_T_QP:
      jj_consume_token(COLON_T_QP);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    PropertyValue(value);
    jj_consume_token(CRLF_T);
      {if (true) return new ParserProperty(name.toString(),
                                false,
                                parameters,
                                value.toString());}
    throw new Error("Missing return statement in function");
  }

  final public void PropertyValue(StringBuffer buffer) throws ParseException {
    Token value;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROP_VALUE_T:
      case PROP_LINEFOLD_T:
      case PROP_VALUE_T_QP:
      case PROP_EXCEPTIONS_T_QP:
      case PROP_LINEFOLD_T_QP:
      case PROP_EXCEPTIONS_SPLIT_T_1_QP:
      case PROP_EXCEPTIONS_SPLIT_T_2_QP:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROP_LINEFOLD_T:
        value = jj_consume_token(PROP_LINEFOLD_T);
        break;
      case PROP_VALUE_T:
        value = jj_consume_token(PROP_VALUE_T);
          buffer.append(value.toString());
        break;
      case PROP_LINEFOLD_T_QP:
        value = jj_consume_token(PROP_LINEFOLD_T_QP);
        break;
      case PROP_VALUE_T_QP:
        value = jj_consume_token(PROP_VALUE_T_QP);
          buffer.append(value.toString());
        break;
      case PROP_EXCEPTIONS_T_QP:
        value = jj_consume_token(PROP_EXCEPTIONS_T_QP);
      buffer.append(value.toString());
        break;
      case PROP_EXCEPTIONS_SPLIT_T_1_QP:
        value = jj_consume_token(PROP_EXCEPTIONS_SPLIT_T_1_QP);
            String qpSplit = value.toString();
            qpSplit = qpSplit.substring(0,2) + qpSplit.charAt(qpSplit.length() - 1);
            buffer.append(qpSplit);
        break;
      case PROP_EXCEPTIONS_SPLIT_T_2_QP:
        value = jj_consume_token(PROP_EXCEPTIONS_SPLIT_T_2_QP);
            qpSplit = value.toString();
            qpSplit = '=' + qpSplit.substring(qpSplit.length() - 2);
            buffer.append(qpSplit);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Parameters(ArrayList parameters) throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON_T:
      case QP_PARAMETER_T:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      Parameter(parameters);
    }
  }

  final public void Parameter(ArrayList parameters) throws ParseException {
    StringBuffer nameBuf = new StringBuffer();
    StringBuffer valueBuf = new StringBuffer();

    String nameString = null;
    String valueString = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON_T:
      jj_consume_token(SEMICOLON_T);
      ParameterNameValue(nameBuf);
            nameString = nameBuf.toString();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS_T:
        jj_consume_token(EQUALS_T);
        ParameterNameValue(valueBuf);
            valueString = valueBuf.toString();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      break;
    case QP_PARAMETER_T:
      jj_consume_token(QP_PARAMETER_T);
            nameString = "ENCODING";
            valueString = "QUOTED-PRINTABLE";
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        parameters.add(new ParserParam(nameString,
                valueString));
  }

  final public void ParameterNameValue(StringBuffer buffer) throws ParseException {
    Token value;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAMETER_T:
      case PARAM_LINEFOLD_T:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM_LINEFOLD_T:
        value = jj_consume_token(PARAM_LINEFOLD_T);
        break;
      case PARAMETER_T:
        value = jj_consume_token(PARAMETER_T);
          buffer.append(value.toString());
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public XVCalendarSyntaxParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x100,0x400c,0x400c,0x4000,0x4000,0x18000,0xfe0000,0xfe0000,0x1200,0x400,0x1200,0x2800,0x2800,};
   }

  public XVCalendarSyntaxParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public XVCalendarSyntaxParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.toString()); }
    token_source = new XVCalendarSyntaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.toString()); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public XVCalendarSyntaxParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XVCalendarSyntaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public XVCalendarSyntaxParser(XVCalendarSyntaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public void ReInit(XVCalendarSyntaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[24];
    for (int i = 0; i < 24; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
