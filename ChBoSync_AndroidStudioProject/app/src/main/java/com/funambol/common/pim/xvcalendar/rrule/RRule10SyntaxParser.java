/* Generated By:JavaCC: Do not edit this line. RRule10SyntaxParser.java */
package com.funambol.common.pim.xvcalendar.rrule;

import com.funambol.common.pim.*;



public class RRule10SyntaxParser implements RRule10SyntaxParserConstants {
    private RRule10SyntaxParserListener listener;

    public void parse() throws ParseException {
        iCalendarRRule();
    }

    public void setListener(RRule10SyntaxParserListener listener) {
        this.listener = listener;
    }

/*
start           ::= <daily> [<enddate>] |
                    <weekly> [<enddate>] |
                    <monthlybypos> [<enddate>] |
                    <monthlybyday> [<enddate>] |
                    <yearlybymonth> [<enddate>] |
                    <yearlybyday> [<enddate>]
*/
  final public void iCalendarRRule() throws ParseException {
    String untilValue   = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
      daily();
      break;
    case 2:
      weekly();
      break;
    case 3:
      monthlybypos();
      break;
    case 4:
      monthlybyday();
      break;
    case 5:
      yearlybymonth();
      break;
    case 6:
      yearlybyday();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ISO_8601_DATE_TIME:
      untilValue = enddate();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(0);
        if (untilValue != null) {
            listener.setEndDate(untilValue);
        }
  }

/* daily           ::= D<interval> [<duration>] */
  final public void daily() throws ParseException {
    String interval = null;
    String duration = null;
    jj_consume_token(1);
    interval = interval();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      duration = duration();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
        listener.setType("D");
        listener.setInterval(interval);
        if (duration != null) {
            listener.setDuration(duration);
        }
  }

/* weekly          ::= W<interval> [<weekdaylist>] [<duration>] */
  final public void weekly() throws ParseException {
    String interval = null;
    String duration = null;
    String weekdays = null;
    jj_consume_token(2);
    interval = interval();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      weekdays = weekdaylist();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      duration = duration();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
        listener.setType("W");
        listener.setInterval(interval);
        if (weekdays != null) {
            listener.setDays(weekdays);
        }
        if (duration != null) {
            listener.setDuration(duration);
        }
  }

/* monthlybypos    ::= MP<interval> [<occurrencelist> <weekdaylist>] [<duration>] */
  final public void monthlybypos() throws ParseException {
    String interval = null;
    String duration = null;
    String occurrencelist = null;
    String weekdaylist = null;
    jj_consume_token(3);
    interval = interval();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITS:
      occurrencelist = occurrencelist();
      weekdaylist = weekdaylist();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      duration = duration();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
        listener.setType("MP");
        listener.setInterval(interval);
        if (occurrencelist != null && weekdaylist != null) {
            listener.setDays(weekdaylist);
            listener.setOccurrences(occurrencelist);
        }
        if (duration != null) {
            listener.setDuration(duration);
        }
  }

/* monthlybyday    ::= MD<interval> [<daynumberlist>] [<duration>] */
  final public void monthlybyday() throws ParseException {
    String interval = null;
    String duration = null;
    String daynumberlist = null;
    jj_consume_token(4);
    interval = interval();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
    case DIGITS:
      daynumberlist = daynumberlist();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      duration = duration();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
        listener.setType("MD");
        listener.setInterval(interval);
        if (daynumberlist != null) {
            listener.setDaysNumber(daynumberlist);
        }
        if (duration != null) {
            listener.setDuration(duration);
        }
  }

/* yearlybymonth   ::= YM<interval> [<monthlist>] [<duration>] */
  final public void yearlybymonth() throws ParseException {
    String interval = null;
    String duration = null;
    String monthlist = null;
    jj_consume_token(5);
    interval = interval();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITS:
      monthlist = monthlist();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      duration = duration();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
        listener.setType("YM");
        listener.setInterval(interval);
        if (monthlist != null) {
            listener.setMonths(monthlist);
        }
        if (duration != null) {
            listener.setDuration(duration);
        }
  }

/* yearlybyday     ::= YD<interval> [<daylist>] [<duration>] */
  final public void yearlybyday() throws ParseException {
    String interval = null;
    String duration = null;
    String daylist  = null;
    jj_consume_token(6);
    interval = interval();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITS:
      daylist = daylist();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      duration = duration();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
        listener.setType("YD");
        listener.setInterval(interval);
        if (daylist != null) {
            listener.setDays(daylist);
        }
        if (duration != null) {
            listener.setDuration(duration);
        }
  }

/* daynumberlist   ::= daynumber {<daynumberlist>} */
  final public String daynumberlist() throws ParseException {
    StringBuffer buffer = new StringBuffer ();
    String daynumber    = null;
    label_1:
    while (true) {
      daynumber = daynumber();
                                 buffer.append ( buffer.length () > 0 ? "," + daynumber : daynumber );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case DIGITS:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_1;
      }
    }
        {if (true) return buffer.toString ();}
    throw new Error("Missing return statement in function");
  }

/* occurrencelist  ::= <occurrence> {<occurrencelist>} */
  final public String occurrencelist() throws ParseException {
    StringBuffer buffer = new StringBuffer ();
    String occurrence   = null;
    label_2:
    while (true) {
      occurrence = occurrence();
                                   buffer.append ( buffer.length () > 0 ? "," + occurrence : occurrence );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_2;
      }
    }
        {if (true) return buffer.toString ();}
    throw new Error("Missing return statement in function");
  }

/* weekdaylist     ::= <weekday> {<weekdaylist>} */
  final public String weekdaylist() throws ParseException {
    StringBuffer buffer = new StringBuffer ();
    String weekday      = null;
    label_3:
    while (true) {
      weekday = weekday();
                             buffer.append ( buffer.length () > 0 ? "," + weekday : weekday );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_3;
      }
    }
        {if (true) return buffer.toString ();}
    throw new Error("Missing return statement in function");
  }

/* daylist         ::= <day> {<daylist>} */
  final public String daylist() throws ParseException {
    StringBuffer buffer = new StringBuffer ();
    String day  = null;
    label_4:
    while (true) {
      day = day();
                     buffer.append ( buffer.length () > 0 ? "," + day : day );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
    }
        {if (true) return buffer.toString ();}
    throw new Error("Missing return statement in function");
  }

/* monthlist       ::= <month> {<monthlist> */
  final public String monthlist() throws ParseException {
    StringBuffer buffer = new StringBuffer ();
    String month = null;
    label_5:
    while (true) {
      month = month();
                         buffer.append ( buffer.length () > 0 ? "," + month : month );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
    }
        {if (true) return buffer.toString ();}
    throw new Error("Missing return statement in function");
  }

/* weekday         ::= <SU|MO|TU|WE|TH|FR|SA> */
  final public String weekday() throws ParseException {
    Token weekday = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      weekday = jj_consume_token(7);
      break;
    case 8:
      weekday = jj_consume_token(8);
      break;
    case 9:
      weekday = jj_consume_token(9);
      break;
    case 10:
      weekday = jj_consume_token(10);
      break;
    case 11:
      weekday = jj_consume_token(11);
      break;
    case 12:
      weekday = jj_consume_token(12);
      break;
    case 13:
      weekday = jj_consume_token(13);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return weekday.image;}
    throw new Error("Missing return statement in function");
  }

/*
    daynumber       ::= <1-31> [<plus>|<minus>]| <lastday>
    lastday         ::= LD
*/
  final public String daynumber() throws ParseException {
    Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITS:
      value = jj_consume_token(DIGITS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    case 14:
      value = jj_consume_token(14);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return value.image;}
    throw new Error("Missing return statement in function");
  }

/* day             ::= <1-366> */
  final public String day() throws ParseException {
    Token value;
    value = jj_consume_token(DIGITS);
      {if (true) return value.image;}
    throw new Error("Missing return statement in function");
  }

/* occurrence      ::= <1-5><plus> | <1-5><minus> */
  final public String occurrence() throws ParseException {
    Token   value;
    String  result = null;
    value = jj_consume_token(DIGITS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                        result = "+" + value.image;
      break;
    case MINUS:
      jj_consume_token(MINUS);
                        result = "-" + value.image;
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/* enddate         ::= ISO 8601_date_time value(e.g., 19940712T101530Z) */
  final public String enddate() throws ParseException {
    Token value;
    value = jj_consume_token(ISO_8601_DATE_TIME);
      {if (true) return value.image;}
    throw new Error("Missing return statement in function");
  }

/* interval        ::= <digits> */
  final public String interval() throws ParseException {
    Token value;
    value = jj_consume_token(DIGITS);
      {if (true) return value.image;}
    throw new Error("Missing return statement in function");
  }

/* duration        ::= #<digits> */
  final public String duration() throws ParseException {
    Token value;
    jj_consume_token(15);
    value = jj_consume_token(DIGITS);
      {if (true) return value.image;}
    throw new Error("Missing return statement in function");
  }

/* month           ::= <1-12> */
  final public String month() throws ParseException {
    Token value;
    value = jj_consume_token(DIGITS);
      {if (true) return value.image;}
    throw new Error("Missing return statement in function");
  }

  public RRule10SyntaxParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7e,0x80000,0x8000,0x3f80,0x8000,0x10000,0x8000,0x14000,0x8000,0x10000,0x8000,0x10000,0x8000,0x14000,0x10000,0x3f80,0x10000,0x10000,0x3f80,0x60000,0x60000,0x14000,0x60000,};
   }

  public RRule10SyntaxParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public RRule10SyntaxParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RRule10SyntaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public RRule10SyntaxParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RRule10SyntaxParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public RRule10SyntaxParser(RRule10SyntaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public void ReInit(RRule10SyntaxParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[21];
    for (int i = 0; i < 21; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
